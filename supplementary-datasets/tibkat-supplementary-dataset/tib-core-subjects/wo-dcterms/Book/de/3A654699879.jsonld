{
    "@graph": [
        {
            "@id": "https://www.tib.eu/de/suchen/id/TIBKAT%3A654699879",
            "@type": "bibo:Book",
            "P1053": "XII, 167 S.",
            "creator": "Kaiser, Bastian",
            "description": [
                "27 cm",
                "Ill., graph. Darst."
            ],
            "identifier": [
                "(isbn13)9783836692397",
                "(ppn)654699879",
                "(firstid)DNB:1010572512"
            ],
            "publisher": "Diplomica-Verl.",
            "subject": [
                "(classificationName=linseach:mapping)mas",
                "(classificationName=bk, id=106420046)52.75 - Spanende Materialbearbeitung",
                "(classificationName=bk, id=181571455)50.03 - Methoden und Techniken der Ingenieurwissenschaften",
                "(classificationName=ddc-dbn)620",
                "(classificationName=linseach:mapping)mat",
                "(classificationName=ddc)625.8",
                "(classificationName=dbn)|620|670"
            ],
            "title": "Implementierung einer Methode zur automatischen 3D-FEM-Modellerstellung und Festigkeitsrechnung f\u00fcr Vollhartmetall-Spiralbohrer : unter Verwendung von nicht kommerzieller Matlab-Software",
            "abstract": "Aus der Einleitung: In der heutigen industriellen Fertigung ist das Bohren ein wichtiger Prozess. Der Anwendungsbereich des Verfahrens reicht von einfachen Durchgangsbohrungen f\u00fcr Schraubenverbindungen bis hin zu komplexen und hochpr\u00e4zisen Fl\u00fcssigkeitskan\u00e4len in Hydraulikverteilern. Die Entwicklung neuer Technologien im Bereich der Werkzeugmaschinen und der Werkzeuge hat auch f\u00fcr das Bohren neue Anwendungsfelder er\u00f6ffnet. Beispiele sind die Hochgeschwindigkeitsbearbeitung (HSC) oder der Einsatz von Minimalmengen-Schmiersystemen (MMS). Es ist notwendig, die Bohrer best\u00e4ndig weiter zu entwickeln, um sie produktiv in diesen neuen Einsatzfeldern zu verwenden. Stand der Technik f\u00fcr komplexe Bohraufgaben sind Vollhartmetall-Spiralbohrer mit innenliegenden K\u00fchlkan\u00e4len. Mit diesen Werkzeugen sind Bohrungen mit einem Verh\u00e4ltnis von Bohrungstiefe zu -durchmesser von bis zu 40 m\u00f6glich. Dabei haben sie wesentliche Vorteile gegen\u00fcber den konventionellen Tiefbohrverfahren. Die Optimierung dieser Werkzeuge stellt die Ingenieure jedoch vor eine gro\u00dfe Herausforderung, da die Parameter der komplexen Geometrie sich gegenseitig beeinflussen und die Auswirkungen einer Parameter\u00e4nderung auf analytischem Wege kaum zu ermitteln sind. Au\u00dferdem besteht ein Zielkonflikt zwischen der Gr\u00f6\u00dfe der Spannuten und der K\u00fchlkan\u00e4le, die zusammen f\u00fcr einen guten Abtransport der Sp\u00e4ne aus dem Bohrungsgrund sorgen, einerseits und der Menge an tragendem Material im Bohrerquerschnitt, die eine hohe Steifigkeit des Bohrers gew\u00e4hrleistet, andererseits. F\u00fcr die Optimierung der Geometrie eines Werkzeuges wird h\u00e4ufig die Analyse mit der Finite-Elemente-Methode (FEM) angewendet. Dieses Verfahren erlaubt es, komplexe physikalische und technische Sachverhalte im Computer zu simulieren, w\u00e4hrend sich das Bauteil noch in der Entwicklungsphase befindet. Dadurch kann der Bau teurer und aufwendiger Prototypen reduziert und Kosten, sowie Entwicklungszeit eingespart werden. Die FEM ist in vielen Bereichen ein wichtiges Werkzeug f\u00fcr Ingenieure und es werden viele verschiedene Programme mit unterschiedlichen Spezialisierungen auf dem Markt angeboten. Es gibt auch Ans\u00e4tze von kostenlos verf\u00fcgbarer Software f\u00fcr die FEM-Analyse. Seit mehreren Jahren gibt es eine zunehmende Entwicklung von frei verf\u00fcgbarer Software. Abb. 1.1 zeigt die Ergebnisse einer Studie, die die Verbreitung von quelloffenen Programmen (OSS - OpenSource Software) auf privaten und gesch\u00e4ftlichen PCs untersucht, wobei die Dunkelziffer noch weit gr\u00f6\u00dfer sein d\u00fcrfte. OSS sind Computerprogramme, die von Jedermann verwendet, umgeschrieben und weiterverbreitet werden d\u00fcrfen. Auch im Maschinenbau gibt es immer wieder Anwendungen f\u00fcr diese Programme, beispielsweise die Verwendung von Linux-Betriebssystemen f\u00fcr die Steuerungscomputer von Werkzeugmaschinen. Die Vorteile von OSS sind: Kostenersparnis durch Wegfall von Lizenzgeb\u00fchren. Die Software kann bei Bedarf vollst\u00e4ndig an die Bed\u00fcrfnisse des Benutzers angepasst werden. Oftmals schnelle Reaktion auf Anwenderprobleme, da jeder Anwender selbst Korrekturvorschl\u00e4ge machen kann. Programmupdatens werden \u00f6fter geliefert, da kommerzielle Software normalerweise in gro\u00dfen Releases ver\u00f6ffentlicht wird. Dadurch muss der Anwender l\u00e4nger warten bis Verbesserungen etabliert sind. Meist ist ein Versionsupdate auch mit weiteren Kosten verbunden. FAQs und Support-Foren sind oft besser gepflegt, da jeder Anwender aktiv daran mitarbeiten kann.Inhaltsverzeichnis:Inhaltsverzeichnis: Aufgabenstellungi Kurzfassungiii Inhaltsverzeichnisv Abbildungsverzeichnisvii Tabellenverzeichnisix Abk\u00fcrzungsverzeichnisx 1Einleitung1 2Stand der Technik2 2.1Der Bohrprozess2 2.1.1Der Spiralbohrer2 2.1.2Prozesskr\u00e4fte4 2.1.3Material5 2.2Finite Element Methode8 2.2.1Vorgehensweise der FEM-Analyse8 2.2.2Mathematischer Hintergrund12 2.2.3Vom Element- zum Gesamtgleichungssystem16 2.2.4L\u00f6sung des Gleichungssystems18 2.3OpenSource-Software f\u00fcr die FEM-Berechnung20 2.3.1Eigenst\u00e4ndige Software21 2.3.2Matlab-Toolboxes22 3Methodik24 3.1Auswahl der Software26 3.2Erstellung des 3D-FEM-Modells26 3.2.1 2D-Meshing und Extrusion27 3.2.2Extrusion und 3D-Meshing31 3.3FEM-Berechnung32 3.3.1Aufbereitung der Modelldaten32 3.3.2Torsionsberechnung33 3.3.3Biegeberechnung35 3.4Post-Processing36 3.4.1Torsionsbelastbarkeit36 3.4.2Torsionssteifigkeit36 3.4.3Biegesteifigkeit37 3.4.4Ber\u00fccksichtigung der Kernverj\u00fcngung37 3.5Optimierung39 4Ergebnisse40 4.1Parametereinfl\u00fcsse41 4.1.1Dralll\u00e4nge41 4.1.2Drehmoment42 4.1.3Ebenenabstand44 4.1.4Elementgr\u00f6\u00dfe45 4.1.5L\u00e4nge des Biegemodells46 4.1.6L\u00e4nge des Torsionsmodells48 4.1.7Biegelast49 4.1.8Anzahl der ausgeblendeten Ebenen51 4.2Stabilit\u00e4t und Robustheit52 4.3Genauigkeit der Berechnungsergebnisse56 4.4Performance57 5Zusammenfassung60 6Ausblick61 Literaturverzeichnis62 Literatur62 Internetquellen62 AQuellcode der Matlab-Funktionen64 A.1fitness_openfem.m (Hauptfunktion) .64 A.2meshgeneration.m67 A.3verdrillung.m73 A.4start_ofem_torsion.m74 A.5start_ofem_biegung.m78 Bgmsh-Definitionsdateien81 B.1bohrer.geo (Geometriedefinition)81 B.2bohrer.msh (Gitterdefinition)83Textprobe:Textprobe: Kapitel 3, Methodik: Als Ausgangspunkt der Arbeit liegt der Bohrerquerschnitt in einem bestimmten Format in MATLAB vor. Auf diesem m\u00fcssen die einzelnen Schritte aufgebaut werden, die letztendlich die gew\u00fcnschten Ergebnisse hervorbringen. Daher wird zun\u00e4chst die allgemeine Vorgehensweise festgelegt und die Zielgr\u00f6\u00dfen definiert, wie in Abb. 3.1 zu sehen ist. Darin sind Daten als Ellipsen und Vorg\u00e4nge als Rechtecke dargestellt. Die Eingangsdaten sind rot und die Ausgabedaten gr\u00fcn gekennzeichnet. Als Zielgr\u00f6\u00dfen werden die folgenden Berechnungsergebnisse definiert: Torsionsbelastbarkeit sagt aus, welche maximale Spannung im Bohrer bei einem definierten Torsionsmoment auftritt. Eine niedrige Torsionsbelastbarkeit bedeutet, dass der Bohrer eine h\u00f6here Torsionslast aufnehmen kann, bevor er bricht. Torsionssteifigkeit sagt aus, welches Drehmoment ben\u00f6tigt wird, um eine definierte Verdrehung des Bohrers zu erreichen. Biegesteifigkeit sagt aus, welche Biegelast ben\u00f6tigt wird, um eine definierte Durchbiegung zu erreichen. Die Daten, die zur Berechnung dieser Gr\u00f6\u00dfen ben\u00f6tigt werden, k\u00f6nnen direkt oder indirekt aus der FEM-Berechnung ermittelt werden. Zun\u00e4chst m\u00fcssen jedoch die Programme, mit denen die Berechnung ausgef\u00fchrt werden sollen, ausgew\u00e4hlt werden. Die Hauptentscheidung liegt dabei zwischen eigenst\u00e4ndigen, ausf\u00fchrbaren Programmen und MATLAB-Toolboxes. Da beide Vor- und Nachteile haben, ist hier ein kleiner \u00dcberblick dargestellt: Rechengenauigkeit Die Genauigkeit der Ergebnisse h\u00e4ngt in erster Linie von der Feinheit des Gitters ab. Generell gilt, je feiner das Gitter, desto genauer die Ergebnisse, wobei jedoch zu beachten ist, dass bei zu feinen Gittern numerische Fehler auftreten k\u00f6nnen . Die mathematischen Methoden der Gleichungsl\u00f6sung sind in allen Programmen \u00e4hnlich implementiert und die Fehleranf\u00e4lligkeit dieser Methoden beziehen sich haupts\u00e4chlich auf numerische Rundungsfehler. Da diese von der M\u00f6glichkeit des Computers, Gleitkommaoperationen durchzuf\u00fchren, bestimmt werden, ist kein nennenswerter Unterschied in der Genauigkeit verschiedener Solver zu erwarten. Der Schwerpunkt liegt daher f\u00fcr dieses Kriterium beim Mesher, der ein f\u00fcr FEM gut geeignetes Gitter erzeugen k\u00f6nnen muss. Fehleranf\u00e4lligkeit Hier wird unterschieden in: Berechnungsfehler aufgrund der mathematischen Formulierung, zum Beispiel den verwendeten L\u00f6sungsalgorithmus f\u00fcr das LGS. Hier sind die Unterschiede zu vernachl\u00e4ssigen. Implementierungsfehler treten auf, wenn der Programmablauf inkorrekt programmiert wurde. Hier sind MATLABToolboxes anf\u00e4lliger, da sie in der Regel eine Sammlung von Funktionen darstellen, aus denen sich der Anwender ein eigenes Programm schreibt. Eigenst\u00e4ndige Programme sind hingegen geschlossene Systeme, die ordentlich getestet wurden. Hier k\u00f6nnen Implementierungsfehler h\u00f6chstens in der Form auftreten, dass der Anwender falsche Parameter \u00fcbergibt. Fehler bei der Daten\u00fcbertragung k\u00f6nnen zwischen den einzelnen Abschnitten des Gesamtprogramms, beispielsweise bei der \u00dcbergabe des Modells vom Mesher an den Solver auftreten. Hier ist die Anf\u00e4lligkeit bei externen Programmen gr\u00f6\u00dfer, da die Daten zwischen den einzelnen Programmen transferiert werden m\u00fcssen. Problematischer ist es, wenn die Berechnungsroutine auf ein anderes Computersystem \u00fcbertragen werden muss, da es zu Schwierigkeiten bei der Angabe der Systempfade im Programm kommen kann. Berechnungsgeschwindigkeit Die Geschwindigkeit, auch Performance genannt, h\u00e4ngt von verschiedenen Faktoren ab. Die Feinheit des Gitters ist eine entscheidende Gr\u00f6\u00dfe, da feinere Gitter eine wesentlich gr\u00f6\u00dfere Rechenzeit in Anspruch nehmen. Es gibt ebenfalls Unterschiede zwischen den Gleichungsl\u00f6sern. Wie bereits in Kapitel 2.2.4 dargelegt wurde, sind iterative Verfahren schneller und weniger speicherintensiv als direkte Verfahren. Generell kann behauptet werden, dass eigenst\u00e4ndige Programme bei gleicher Vorgehensweise schneller sind als MATLAB-Toolboxes. Grund hierf\u00fcr ist, dass die MATLABProgrammiersprache eine interpretierende Sprache ist. Der Code wird so, wie er geschrieben wird, abgespeichert und vom Interpreter Zeile f\u00fcr Zeile ausgef\u00fchrt. Kompilierende Programmiersprachen, beispielsweise C++, schreiben den Quellcode erst um, wodurch er wesentlich schneller ausgef\u00fchrt werden kann. Bei der Programmierung in MATLAB ist daher darauf zu achten, dass so viele Rechenoperationen wie m\u00f6glich von den vorkompilierten MATLAB-Funktionen ausgef\u00fchrt werden, da diese schneller ablaufen als ein selbst geschriebener Code [2]. DesWeiteren ist zu ber\u00fccksichtigen, dass bei der Verwendung externer Programme die ben\u00f6tigte Zeit f\u00fcr den Datenim- und export beachtet werden muss. Moderne Computersysteme haben h\u00e4ufig mehrere Prozessorkerne, auf denen Berechnungen gleichzeitig ausgef\u00fchrt werden k\u00f6nnen. Die M\u00f6glichkeiten, die MATLAB in dieser Richtung bietet, sind oft gr\u00f6\u00dfer als die von eigenst\u00e4ndiger OSS, daher kann durch Parallelisierung der Rechenoperationen die Geschwindigkeit einer MATLAB-Implementierung gesteigert werden. Als weitere Kriterien, nach denen eine Auswahl aus den in Kapitel 2.3 vorgestellten Programmen getroffen werden kann, werden die Verf\u00fcgbarkeit und die Dokumentation der Software ber\u00fccksichtigt. Die Verf\u00fcgbarkeit bezieht sich dabei vor allem auf die Weiterentwicklung, da viele Programme zwar im Internet verf\u00fcgbar sind, jedoch aufgrund fehlender Entwickler nicht mehr offiziell unterst\u00fctzt werden. Die Dokumentation ist wichtig, um Fehler bei der Implementierung zu vermeiden. Der Anwender hat keine Verwendung f\u00fcr eine leistungsf\u00e4hige Software, von der er nicht wei\u00df wie er diese bedienen muss. Wie in Abb. 3.1 bereits gezeigt gibt es f\u00fcr die Erstellung des 3D-Modells zwei prinzipielle Vorgehensweisen. Da diese einen starken Einfluss auf die Auswahl des Meshers haben, werden sie hier kurz erl\u00e4utert: Der 2D-Querschnitt wird mit einem Dreiecks- oder Vierecksgitter vernetzt. Danach wird dieses Gitter nach oben extrudiert und dabei verdreht, so dass die spiralf\u00f6rmige Gestalt des Bohrers entsteht. Dabei entstehen diskrete Ebenen, die untereinander so verbunden werden, dass sich dreidimensionale Prisma- oder Quaderelemente ergeben. Der 2D-Querschnitt wird zun\u00e4chst extrudiert und dabei verdrillt. Anschlie\u00dfend werden die \u00e4u\u00dferen Punkte so verbunden, dass sie eine geschlossene Oberfl\u00e4che bilden, die das gesamte Volumen des Bohrers einschlie\u00dft. Dieses wird danach mit einem automatischem Mesher vernetzt, beispielsweise mit Tetraeder-Elementen. F\u00fcr die erste M\u00f6glichkeit wird kein aufwendiger Mesher ben\u00f6tigt, da er nur zweidimensionale Gitter erzeugen k\u00f6nnen muss. Diese Variante ist vermutlich wesentlich schneller. Die Erfahrung hat gezeigt, dass die Vernetzung mit Prisma- oder Quaderelementen effizienter ist als mit Tetraederelementen.",
            "alternative": "3D-FEM Modellerstellung",
            "contributor": "Technische Informationsbibliothek (TIB)",
            "issued": "2011",
            "language": "http://id.loc.gov/vocabulary/iso639-1/de",
            "license": "commercial licence",
            "medium": "rda:termList/RDACarrierType/1044",
            "tableOfContents": "http://d-nb.info/1010572512/04",
            "P60163": "Hamburg"
        }
    ],
    "@id": "urn:x-arq:DefaultGraphNode",
    "@context": {
        "contributor": "http://purl.org/dc/terms/contributor",
        "tableOfContents": "http://purl.org/dc/terms/tableOfContents",
        "subject": "http://purl.org/dc/elements/1.1/subject",
        "identifier": "http://purl.org/dc/elements/1.1/identifier",
        "description": "http://purl.org/dc/elements/1.1/description",
        "issued": "http://purl.org/dc/terms/issued",
        "creator": "http://purl.org/dc/elements/1.1/creator",
        "P60163": "http://www.rdaregistry.info/Elements/u/#P60163",
        "abstract": "http://purl.org/dc/terms/abstract",
        "alternative": "http://purl.org/dc/terms/alternative",
        "publisher": "http://purl.org/dc/elements/1.1/publisher",
        "P1053": "http://iflastandards.info/ns/isbd/elements/P1053",
        "language": {
            "@id": "http://purl.org/dc/terms/language",
            "@type": "@id"
        },
        "license": "http://purl.org/dc/terms/license",
        "medium": {
            "@id": "http://purl.org/dc/terms/medium",
            "@type": "@id"
        },
        "title": "http://purl.org/dc/elements/1.1/title",
        "umbel": "http://umbel.org/umbel#",
        "rdau": "http://www.rdaregistry.info/Elements/u/#",
        "owl": "http://www.w3.org/2002/07/owl#",
        "dcterms": "http://purl.org/dc/terms/",
        "bibo": "http://purl.org/ontology/bibo/",
        "rdam": "http://www.rdaregistry.info/Elements/m/#",
        "gnd": "http://d-nb.info/gnd/",
        "isbd": "http://iflastandards.info/ns/isbd/elements/",
        "rda": "http://rdvocab.info/",
        "doi": "https://doi.org/"
    }
}