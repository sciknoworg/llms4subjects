{
    "@graph": [
        {
            "@id": "gnd:10179296-7",
            "sameAs": "Technische Universit\u00e4t Hamburg-Harburg, Institut f\u00fcr Telematik"
        },
        {
            "@id": "gnd:1137288833",
            "sameAs": "Schupp, Sibylle"
        },
        {
            "@id": "gnd:122165527",
            "sameAs": "Turau, Volker"
        },
        {
            "@id": "gnd:2067664-5",
            "sameAs": "Technische Universit\u00e4t Hamburg-Harburg"
        },
        {
            "@id": "https://www.tib.eu/de/suchen/id/TIBKAT%3A82631211X",
            "@type": "bibo:Thesis",
            "P1053": "Online-Ressource (PDF-Datei: II, 143 S., 1,92 MB)",
            "http://purl.org/dc/elements/1.1/creator": "Machens, Holger",
            "description": "Ill., graph. Darst",
            "identifier": [
                "(firstid)GBV:82631211X",
                "(doi)10.15480/882.1240",
                "(ppn)82631211X"
            ],
            "publisher": "Techn. Univ. Hamburg-Harburg, Univ.-Bibl.",
            "subject": [
                "(classificationName=linseach:mapping)inf",
                "(classificationName=ddc-dbn)004",
                "(classificationName=bk, id=106418815)54.10 - Theoretische Informatik",
                "(classificationName=ddc)620: Ingenieurwissenschaften"
            ],
            "title": "Cloned transactions : a new execution concept for transactional memory",
            "abstract": [
                "Transactional memory aims to replace mutual exclusion in critical sections with transactions on shared data to improve the scalability of concurrent applications and eliminate traditional issues of parallel programming such as deadlocks/livelocks. One key aspect of transaction processing is the concurrency control, which is responsible to find an interleaving or overlapping schedule for running transactions accessing the same shared data and provide a result equal to some serial execution of the same transactions. In this regard, former research focused on single-threaded concurrency control schemes using a trial and error approach: The transaction repeats executing the critical section until no conflict with other transactions was detected. This thesis proposes the application of helper threads in transactional memory to achieve a parallelised transaction processing, which is able to compute the same critical section in respect to different serialisation orders with other transactions. While traditional concurrency control has to rollback and start another attempt in the same thread, this approach aims to compute the next attempt in a helper thread in parallel to the current attempt computed by a leading thread. Due to the nature of transactions and concurrent shared memory applications in general, the introduction of helper threads comes with several new aspects to be considered on the conceptional and the implementation level. The work presents concepts for helper thread aided concurrency controls independently executing the same transaction in parallel instead of sharing information of the leader thread, to lower the contention. For example, the detection of conflicts is delegated to a helper thread which executes the same transaction on the same state of shared data in parallel instead of validating the data read by the leader. In this manner parallelised transaction processing has been proposed which executes a transaction in parallel with different validation schemes: lazy and eager validation. Because the reaction time on conflicts and execution time differ, they drift apart and compute results for different serialisation orders. The work also presents several requirements and sub-systems needed to run parallelised transactions: The use of so-called transactional wrappers or pure functions to speedup access to thread private data in transactional sections cannot be granted, because the private data of the application thread is now concurrently accessed by the helper thread. Also, a concept has been developed to clone the state of the transaction start and transfer the state of the helper committed transaction back to the leader. The existing sandboxing approach of Dalessandro and Scott to suppress and prevent errors in transactions resulting from lazy validation has been improved and memory management inside transactions was adapted. While the developed approaches can compete in some cases and show good scalability especially in higher concurrency, the evaluation shows an unexpected large loss of performance, too. An investigation of hardware characteristics in respect to memory and cache read/write latency revealed several scalability issues with concurrent access to the same address. These issues have significant impact on highly concurrent applications, which seriously affects the use of transactions in general and parallelised transactions in particular.$cen$dAbstract",
                "Transactional Memory zielt darauf ab wechselseitigen Ausschluss in kritischen Abschnitten durch Transaktionen auf gemeinsamen Daten zu ersetzen, um die Skalierbarkeit nebenl\u00e4ufiger Anwendungen zu verbessern und traditionelle Probleme paralleler Programmierung wie Deadlocks/Livelocks zu eliminieren. Eine Schl\u00fcsselrolle in der Transaktionsverarbeitung spielt die Nebenl\u00e4ufigkeitskontrolle, die f\u00fcr das Auffinden verzahnter oder \u00fcberlappender Ablaufpl\u00e4ne f\u00fcr laufende Transaktionen auf gemeinsamen Daten zust\u00e4ndig ist, deren Ergebnis \u00e4quivalent zu einer seriellen Ausf\u00fchrung derselben Transaktionen ist. In dieser Hinsicht konzentrierte sich die bisherige Forschung auf Nebenl\u00e4ufigkeitskontrollen f\u00fcr Transaktionen mit nur einem Ausf\u00fchrungsfaden basierend auf einem Trial and Error-Ansatz: Die Transaktion f\u00fchrt den kritischen Abschnitt solange wiederholt aus, bis kein Konflikt mit anderen Transaktionen f\u00fcr einen Durchlauf entstanden ist. Diese Arbeit unterbreitet den Vorschlag Hilfs-Threads in Transactional Memory einzusetzen, um eine parallelisierte Transaktionsverarbeitung zu erreichen, die eine gleichzeitige Bearbeitung unterschiedlicher Serialisierungsreihenfolgen auf demselben kritischen Abschnitt in Relation zu anderen laufenden Transaktionen erlaubt. W\u00e4hrend bisher bekannte Nebenl\u00e4ufigkeitskontrollen die Transaktion zur\u00fccksetzen m\u00fcssen, um mit dem einen verf\u00fcgbaren Thread der Transaktion einen weiteren Bearbeitungsversuch hinsichtlich einer neuen Serialisierungsordnung zu starten, erlaubt der hier vorgeschlagene Ansatz den n\u00e4chsten Bearbeitungsversuch bereits zu Beginn des aktuellen Bearbeitungsversuchs an einen Hilfs-Thread zu delegieren. Aufgrund der Besonderheiten von Transaktionen und nebenl\u00e4ufiger Anwendungen auf gemeinsamen Daten im Allgemeinen, geht die Einf\u00fchrung von Hilfs-Threads mit verschiedenen neuen Aspekten einher, die bei Konzeption und Implementierung zu ber\u00fccksichtigen sind. Diese Arbeit pr\u00e4sentiert entwickelte Konzepte f\u00fcr Hilfs-Thread-gest\u00fctzte Nebenl\u00e4ufigkeitskontrollen, welche unabh\u00e4ngig voneinander dieselbe Transaktion parallel ausf\u00fchren, anstatt information mit dem Haupt-Thread der Transaktion zu teilen, um die Wechselwirkungen gering zu halten. Beispielsweise wird die Entdeckung von Konflikten an einen Hilfs-Thread delegiert, der dieselbe Transaktion auf demselben Prozesszustand parallel Ausf\u00fchrt, anstatt auf die Daten des Haupt-Threads zuzugreifen und jene auf Konfliktfreiheit zu pr\u00fcfen. Ein weitergehender hier vorgeschlagener Ansatz mit \u00e4hnlichem Aufbau, beinhaltet die gleichzeitige Bearbeitung des kritischen Abschnitt mit unterschiedlichen Validierungsmethoden: sp\u00e4te Validierung (lazy) und direkte Validierung (eager). Weil die Verfahren unterschiedliche Reaktionszeiten hinsichtlich auftretender Konflikte haben, driften die beiden Threads zeitlich auseinander und verfolgen als konsequenz tendentiell unterschiedliche Serialisierungsreihenfolgen hinsichtlich konkurrierender Transaktionen. Diese Arbeit pr\u00e4sentiert desweiteren Anforderungen und Subsysteme, die f\u00fcr die Realisierung parallelisierter Transaktionen ben\u00f6tigt werden: Die verwendung sogenannter \"Transactional Wrapper\" oder \"Pure Functions\" muss unterbunden werden, weil die Hilfs-Threads nebenl\u00e4ufige Zugriffe auch auf lokalen Variablen einer Funktion erzeugen. Au\u00dferdem wurde eine Konzept zum \"Clonen\" des Zustands einer Transaktion entwickelt, was den Transfer des Kontrollflusses erlaubt, einerseits beim Betreten des kritischen Abschnitts vom Haupt-Thread zum Hilfs-Thread und anderseits bei einem erfolgreichen Commit vom Hilfs-Thread zur\u00fcck zum Haupt-Thread. Der existierende Sandboxing-Ansatz f\u00fcr Transactional Memory von Dalessandro und Scott zur Unterdr\u00fcckung und Vermeidung von Fehlern in der Transaktion aufgrund von sp\u00e4ter Validierung wurde verbessert und die Speicherverwaltung in Transaktionen an die Umstellungen angepasst. W\u00e4hrend die hier entwickelten Ans\u00e4tze in einigen F\u00e4llen durchaus mit konkurrieren konnten und gute Skalierbarkeit in besonderen F\u00e4llen hoher Nebenl\u00e4ufigkeit aufwiesen, zeigte die Evaluierung gleicherma\u00dfen unerwartet hohe Leistungseinbu\u00dfen in anderen F\u00e4llen. Eine Untersuchung der Hardware-Charakteristiken in Bezug auf die Latenz von Lese und Schreibzugriffen auf Speicher und Caches enth\u00fcllte verschiedene Probleme der Skalierbarkeit von gleichzeitigen Zugriffen auf dieselben Speicheradressen. Diese Probleme haben deutlichen Einfluss auf hochgradig nebenl\u00e4ufige Anwendungen, was die Verwendung von Transaktionen im Allgemeinen und die Verwendung parallelisierter Transaktionen im Besonderen stark beeintr\u00e4chtigt.$cde_DE$dAbstract"
            ],
            "contributor": [
                "gnd:1137288833",
                "gnd:122165527"
            ],
            "dcterms:contributor": "Technische Informationsbibliothek (TIB)",
            "creator": [
                "gnd:10179296-7",
                "gnd:2067664-5"
            ],
            "isPartOf": "(collectioncode)GBV-ODiss",
            "issued": "2015",
            "language": "http://id.loc.gov/vocabulary/iso639-1/en",
            "license": "open access",
            "medium": "rda:termList/RDACarrierType/1018",
            "isLike": "doi:10.15480/882.1240"
        }
    ],
    "@id": "urn:x-arq:DefaultGraphNode",
    "@context": {
        "sameAs": "http://www.w3.org/2002/07/owl#sameAs",
        "isPartOf": "http://purl.org/dc/terms/isPartOf",
        "language": {
            "@id": "http://purl.org/dc/terms/language",
            "@type": "@id"
        },
        "contributor": {
            "@id": "http://purl.org/dc/terms/contributor",
            "@type": "@id"
        },
        "P1053": "http://iflastandards.info/ns/isbd/elements/P1053",
        "subject": "http://purl.org/dc/elements/1.1/subject",
        "abstract": "http://purl.org/dc/terms/abstract",
        "medium": {
            "@id": "http://purl.org/dc/terms/medium",
            "@type": "@id"
        },
        "description": "http://purl.org/dc/elements/1.1/description",
        "issued": "http://purl.org/dc/terms/issued",
        "identifier": "http://purl.org/dc/elements/1.1/identifier",
        "title": "http://purl.org/dc/elements/1.1/title",
        "license": "http://purl.org/dc/terms/license",
        "creator": {
            "@id": "http://purl.org/dc/terms/creator",
            "@type": "@id"
        },
        "isLike": {
            "@id": "http://umbel.org/umbel#isLike",
            "@type": "@id"
        },
        "publisher": "http://purl.org/dc/elements/1.1/publisher",
        "umbel": "http://umbel.org/umbel#",
        "rdau": "http://www.rdaregistry.info/Elements/u/#",
        "owl": "http://www.w3.org/2002/07/owl#",
        "dcterms": "http://purl.org/dc/terms/",
        "bibo": "http://purl.org/ontology/bibo/",
        "rdam": "http://www.rdaregistry.info/Elements/m/#",
        "gnd": "http://d-nb.info/gnd/",
        "isbd": "http://iflastandards.info/ns/isbd/elements/",
        "rda": "http://rdvocab.info/",
        "doi": "https://doi.org/"
    }
}